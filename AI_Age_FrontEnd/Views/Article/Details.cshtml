@model AI_Age_FrontEnd.DTOs.ArticleDto

@{
    ViewData["Title"] = "Chi tiết khóa học";
}

<section id="course-article" class="course-article section">
    <div class="container" data-aos="fade-up">
        @if (Model != null)
        {
            <div class="row">
                <!-- Main Content -->
                <div class="col-lg-8 col-md-12 mb-4">
                    <div class="article-title mt-3">
                        <h2 class="text-success">@Model.Title</h2>
                    </div>

                    <div class="article-content mt-2">
                        <p class="lead">
                            @Html.Raw(Model.Content)
                        </p>
                    </div>
                    <div class="star-rating">
                        <span>Đánh giá: </span>
                        <span class="stars" data-article-id="@Model.ArticleId">
                            <i class="fas fa-star" data-value="1"></i>
                            <i class="fas fa-star" data-value="2"></i>
                            <i class="fas fa-star" data-value="3"></i>
                            <i class="fas fa-star" data-value="4"></i>
                            <i class="fas fa-star" data-value="5"></i>
                        </span>
                        <span id="average-rating">(@Model.AverageRating.ToString("F1"))</span>
                    </div>
                </div>
                <!-- Sidebar -->
                <div class="col-lg-4 col-md-12 article-sidebar">
                    <div class="sidebar-box p-3 border rounded shadow-sm">
                        <h3>Chi tiết về bài viết</h3>
                        <ul class="course-info-list">
                            <li>
                                <h5>Người viết</h5>
                                <p><a href="#">@Model.AuthorName</a></p>
                            </li>
                            <li>
                                <h5>Lượt xem</h5>
                                <p>@Model.Views</p>
                            </li>
                            <li>
                                <h5>Cấp độ</h5>
                                <p>
                                    @switch (Model.Level)
                                    {
                                        case 1:
                                            <span>Cơ bản</span>
                                            ; break;
                                        case 2:
                                            <span>Trung bình</span>
                                            ; break;
                                        case 3:
                                            <span>Nâng cao</span>
                                            ; break;
                                        default:
                                            <span>Không xác định</span>
                                            ; break;
                                    }
                                </p>
                            </li>
                            <li>
                                <h5>Đánh giá</h5>
                                <p>@Model.AverageRating</p>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        }
        else
        {
            <p>Bài viết không tồn tại hoặc có lỗi khi tải dữ liệu.</p>
        }
    </div>
</section>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const stars = document.querySelectorAll('.stars .fas.fa-star');

            stars.forEach((star, index) => {
                star.addEventListener('mouseover', () => {
                    for (let i = 0; i <= index; i++) {
                        stars[i].classList.add('hovered');
                    }
                });

                star.addEventListener('mouseout', () => {
                    stars.forEach(s => s.classList.remove('hovered'));
                });

                star.addEventListener('click', async () => {
                    const ratingValue = star.getAttribute('data-value');
                    const articleId = star.parentElement.getAttribute('data-article-id');
                    const userId = localStorage.getItem('userId');

                    const response = await fetch('https://localhost:7022/api/Article/rate', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${localStorage.getItem('jwtToken')}`
                        },
                        body: JSON.stringify({
                            articleId: parseInt(articleId),
                            userId: userId ? parseInt(userId) : null,
                            ratingValue: parseInt(ratingValue)
                        })
                    });

                    if (response.ok) {
                        handleRatingSuccess();
                        const articleResponse = await fetch(`https://localhost:7022/api/Article/${articleId}`);
                        if (articleResponse.ok) {
                            const article = await articleResponse.json();
                            document.getElementById('average-rating').textContent = `(${article.averageRating.toFixed(1)})`;
                            document.getElementById('sidebar-rating').textContent = article.averageRating.toFixed(1);
                        }
                        stars.forEach((s, i) => {
                            s.classList.remove('selected');
                            if (i < ratingValue) s.classList.add('selected');
                        });
                    } else {
                        handleRatingError();
                    }
                });
            });
        });
    </script>
}
