@model AI_Age_FrontEnd.DTOs.VideoArticleDto

@{
    ViewData["Title"] = "Chi tiết Video";
}

<section id="video-detail" class="video-detail section">
    <div class="container" data-aos="fade-up">
        @if (Model != null)
        {
            <div class="row">
                <!-- Video Content -->
                <div class="col-lg-8 col-md-12 mb-4">
                    <div class="video-detail__wrapper position-relative">
                        <video class="video-detail__video" controls poster="@Url.Content(Model.Thumbnail)">
                            <source src="@Model.VideoUrl" type="video/mp4">
                        </video>
                    </div>

                    <div class="video-detail__title mt-3">
                        <h2 class="text-success">@Model.Title</h2>
                    </div>

                    <div class="video-detail__description mt-2">
                        <p class="lead">@Model.Description</p>
                    </div>

                    <div class="video-detail__star-rating">
                        <span>Đánh giá: </span>
                        <span class="video-detail__stars" data-video-id="@Model.VideoId">
                            <i class="fas fa-star video-detail__star" data-value="1"></i>
                            <i class="fas fa-star video-detail__star" data-value="2"></i>
                            <i class="fas fa-star video-detail__star" data-value="3"></i>
                            <i class="fas fa-star video-detail__star" data-value="4"></i>
                            <i class="fas fa-star video-detail__star" data-value="5"></i>
                        </span>
                        <span id="average-rating">(@Model.AverageRating?.ToString("F1"))</span>
                    </div>
                </div>

                <!-- Sidebar -->
                <div class="col-lg-4 col-md-12 video-detail__sidebar">
                    <div class="video-detail__sidebar-box p-3 border rounded shadow-sm">
                        <h3>Chi tiết về video</h3>
                        <ul class="video-detail__info-list">
                            <li>
                                <h5>Người đăng</h5>
                                <p><a href="#">@Model.UploaderName</a></p>
                            </li>
                            <li>
                                <h5>Lượt xem</h5>
                                <p id="view-count">@Model.Views</p>
                            </li>
                            <li>
                                <h5>Thời lượng</h5>
                                <p>@Model.Duration</p>
                            </li>
                            <li>
                                <h5>Cấp độ</h5>
                                <p>
                                    @switch (Model.Level)
                                    {
                                        case 1:
                                            <span>Cơ bản</span>
                                            break;
                                        case 2:
                                            <span>Trung bình</span>
                                            break;
                                        case 3:
                                            <span>Nâng cao</span>
                                            break;
                                        default:
                                            <span>Không xác định</span>
                                            break;
                                    }
                                </p>
                            </li>
                            <li>
                                <h5>Ngày đăng</h5>
                                <p>@Model.PostedDate.ToString("dd/MM/yyyy")</p>
                            </li>
                            <li>
                                <h5>Đánh giá</h5>
                                <p id="sidebar-rating">@Model.AverageRating?.ToString("F1")</p>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        }
        else
        {
            <p>Video không tồn tại hoặc có lỗi khi tải dữ liệu.</p>
        }
    </div>
</section>

@section Scripts {
    <script>
        // Lấy API Base URL từ ViewBag
        const API_BASE_URL = '@ViewBag.ApiBaseUrl';

        document.addEventListener('DOMContentLoaded', async () => {
            const stars = document.querySelectorAll('.video-detail__stars .video-detail__star');
            const starsContainer = document.querySelector('.video-detail__stars');
            const videoId = starsContainer.getAttribute('data-video-id');
            const jwtToken = localStorage.getItem('jwtToken');

             // Hàm gọi API để tăng view
            async function incrementViewCount() {
                if (!videoId) return;

                const viewCountElement = document.getElementById('view-count');
                if (viewCountElement) {
                    let currentViews = parseInt(viewCountElement.textContent) || 0;
                    viewCountElement.textContent = currentViews + 1;
                }

                try {
                    await fetch(`${API_BASE_URL}/api/VideoArticle/increment-view/${videoId}`, {
                        method: 'POST'
                    });
                } catch (error) {
                    console.error('Lỗi khi tăng lượt xem:', error);
                }
            }

            incrementViewCount();

            // Hàm gọi API để tải dữ liệu đánh giá
            async function loadUserRating() {
                if (!jwtToken || !videoId) return;

                try {
                    const response = await fetch(`${API_BASE_URL}/api/VideoArticle/user-rating/${videoId}`, {
                        headers: { 'Authorization': `Bearer ${jwtToken}` }
                    });
                    if (response.ok) {
                        const result = await response.json();
                        const userRating = result.ratingValue;
                        localStorage.setItem(`video_rating_${videoId}`, userRating);
                        applyRating(userRating);
                    }
                } catch {}
            }

            function applyRating(rating) {
                stars.forEach((star, i) => {
                    star.classList.remove('video-detail__star--selected');
                    if (i < (rating || 0)) star.classList.add('video-detail__star--selected');
                });
            }

            // Load persisted rating on page load
            const savedRating = localStorage.getItem(`video_rating_${videoId}`);
            if (savedRating) applyRating(parseInt(savedRating));

            await loadUserRating();

            stars.forEach((star, index) => {
                star.addEventListener('mouseover', () => {
                    stars.forEach(s => s.classList.remove('video-detail__star--hovered'));
                    for (let i = 0; i <= index; i++) stars[i].classList.add('video-detail__star--hovered');
                });

                star.addEventListener('mouseout', () => {
                    stars.forEach(s => s.classList.remove('video-detail__star--hovered'));
                });

                star.addEventListener('click', async () => {
                    if (!jwtToken) {
                        handleNotLoginRating('Vui lòng đăng nhập để đánh giá video');
                        return;
                    }

                    const ratingValue = parseInt(star.getAttribute('data-value'));
                    const userId = localStorage.getItem('userId');

                    try {
                        const response = await fetch(`${API_BASE_URL}/api/VideoArticle/rate`, {
                            method: 'POST',
                            headers: { 'Authorization': `Bearer ${jwtToken}`, 'Content-Type': 'application/json' },
                            body: JSON.stringify({ videoId: parseInt(videoId), userId: userId ? parseInt(userId) : null, ratingValue })
                        });

                        if (response.ok) {
                            const result = await response.json();
                            localStorage.setItem(`video_rating_${videoId}`, ratingValue);
                            applyRating(ratingValue);
                            document.getElementById('average-rating').textContent = `(${result.averageRating.toFixed(1)})`;
                            document.getElementById('sidebar-rating').textContent = result.averageRating.toFixed(1);
                            handleRatingSuccess();
                        }
                    } catch (error) {
                        handleRatingError('Đánh giá thất bại.');
                    }
                });
            });
        });
    </script>
}
