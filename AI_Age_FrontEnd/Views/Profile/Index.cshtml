@model AI_Age_FrontEnd.Models.UserViewModel.ProfileViewModel

@{
    ViewData["Title"] = "Thông tin cá nhân";
}

<div class="profile">
    <div class="profile__header">
        <h2 class="profile__title">@ViewData["Title"]</h2>
        <p class="profile__subtitle">Cập nhật thông tin của bạn tại đây.</p>
    </div>

    <form id="profileForm" class="profile__form" novalidate>
        <div class="profile__content">
            <div class="profile__sidebar">
                <img id="avatarPreview" src="~/img/profile.png" alt="Ảnh đại diện" class="profile__avatar" onclick="document.getElementById('avatarFile').click();" title="Nhấn để thay đổi ảnh đại diện" />
                <div class="profile__field profile__field--hidden">
                    <input asp-for="AvatarFile" id="avatarFile" type="file" onchange="previewFile()">
                </div>
            </div>
            <div class="profile__main">
                <div class="profile__field">
                    <label asp-for="Username" class="profile__label"></label>
                    <input asp-for="Username" class="profile__input" readonly />
                </div>
                <div class="profile__field">
                    <label asp-for="FullName" class="profile__label"></label>
                    <input asp-for="FullName" class="profile__input" required />
                </div>
                <div class="profile__field">
                    <label asp-for="PhoneNumber" class="profile__label"></label>
                    <input asp-for="PhoneNumber" class="profile__input" />
                </div>
                <div class="profile__field">
                    <label asp-for="DateOfBirth" class="profile__label"></label>
                    <input asp-for="DateOfBirth" class="profile__input" type="date" />
                </div>
                <div class="profile__field">
                    <label asp-for="Gender" class="profile__label"></label>
                    <select asp-for="Gender" class="profile__input">
                        <option value="">-- Chọn giới tính --</option>
                        <option value="Nam">Nam</option>
                        <option value="Nữ">Nữ</option>
                        <option value="Khác">Khác</option>
                    </select>
                </div>
                <div class="profile__field">
                    <label asp-for="Address" class="profile__label"></label>
                    <input asp-for="Address" class="profile__input" />
                </div>

                <hr class="profile__divider" />
                <h5 class="profile__subheading">Đổi mật khẩu (để trống nếu không muốn thay đổi)</h5>

                <div class="profile__field">
                    <label asp-for="NewPassword" class="profile__label"></label>
                    <input asp-for="NewPassword" type="password" class="profile__input" />
                </div>
                <div class="profile__field">
                    <label asp-for="ConfirmPassword" class="profile__label"></label>
                    <input asp-for="ConfirmPassword" type="password" class="profile__input" />
                    <span id="password-error" class="profile__error-message"></span>
                </div>
                <div class="profile__actions">
                    <button type="submit" class="profile__button">Lưu thay đổi</button>
                </div>
            </div>
        </div>
    </form>
</div>

<div id="loadingOverlay" class="loading-overlay">
    <div class="spinner-border text-primary" role="status"></div>
</div>

@section Scripts {
    <script>
        const form = document.getElementById('profileForm');
        const alertContainer = document.getElementById('alert-container');
        const loadingOverlay = document.getElementById('loadingOverlay');

        function previewFile() {
            const preview = document.getElementById('avatarPreview');
            const file = document.getElementById('avatarFile').files[0];
            if (file) {
                preview.src = URL.createObjectURL(file);
            }
        }

        const showLoading = (isLoading) => {
            if (isLoading) {
                loadingOverlay.classList.add('loading-overlay--visible');
            } else {
                loadingOverlay.classList.remove('loading-overlay--visible');
            }
        };

        const populateForm = (profileData) => {
            form.querySelector('[name="Username"]').value = profileData.username;
            form.querySelector('[name="FullName"]').value = profileData.fullName;
            form.querySelector('[name="PhoneNumber"]').value = profileData.phoneNumber || '';
            if (profileData.dateOfBirth) {
                form.querySelector('[name="DateOfBirth"]').value = profileData.dateOfBirth.split('T')[0];
            }
            form.querySelector('[name="Gender"]').value = profileData.gender || '';
            form.querySelector('[name="Address"]').value = profileData.address || '';
            if (profileData.avatar) {
                document.getElementById('avatarPreview').src = profileData.avatar;
            }
        };

        const apiBaseUrl = '@ViewBag.ApiBaseUrl';

        const fetchProfile = async () => {
            const token = localStorage.getItem('jwtToken');
            if (!token) {
                 showAlert('Bạn cần đăng nhập để xem trang này.', 'warning');
                 setTimeout(() => window.location.href = '/Auth/Login', 2000);
                 return;
            }

            showLoading(true);
            try {
                const response = await fetch(`${apiBaseUrl}/api/users/profile`, {
                    headers: { 'Authorization': `Bearer ${token}` }
                });

                if (response.status === 401) {
                    localStorage.removeItem('jwtToken');
                    throw new Error('Phiên đăng nhập đã hết hạn. Vui lòng đăng nhập lại.');
                }
                if (!response.ok) {
                    throw new Error('Không thể tải dữ liệu người dùng.');
                }
                const data = await response.json();
                populateForm(data);
            } catch (error) {
                showAlert(error.message, 'danger');
                if (error.message.includes('hết hạn')) {
                    setTimeout(() => window.location.href = '/Auth/Login', 3000);
                }
            } finally {
                showLoading(false);
            }
        };

        const handleFormSubmit = async (event) => {
            event.preventDefault();

            const token = localStorage.getItem('jwtToken');
            if (!token) {
                 showAlert('Phiên đăng nhập đã hết hạn. Vui lòng tải lại trang.', 'danger');
                 return;
            }

            const newPassword = form.querySelector('[name="NewPassword"]').value;
            const confirmPassword = form.querySelector('[name="ConfirmPassword"]').value;

            if (newPassword !== confirmPassword) {
                document.getElementById('password-error').textContent = 'Mật khẩu xác nhận không khớp.';
                return;
            }
            document.getElementById('password-error').textContent = '';

            const formData = new FormData(form);
            showLoading(true);

            try {
                const response = await fetch(`${apiBaseUrl}/api/users/profile`, {
                    method: 'PUT',
                    headers: { 'Authorization': `Bearer ${token}` },
                    body: formData
                });

                const result = await response.json();
                if (!response.ok) {
                    throw new Error(result.message || 'Cập nhật thất bại.');
                }
                handleUpdateProfileSuccess(result.message)
                populateForm(result.profile);

                localStorage.setItem('avatar', result.profile.avatar || '');

                // "Bắn" ra một sự kiện để báo cho layout biết avatar đã thay đổi
                const avatarUpdateEvent = new CustomEvent('avatarUpdated', {
                    detail: { newAvatarUrl: result.profile.avatar }
                });

                window.dispatchEvent(avatarUpdateEvent);
            } catch (error) {
                showAlert(error.message, 'danger');
            } finally {
                showLoading(false);
            }
        };

        document.addEventListener('DOMContentLoaded', () => {
            fetchProfile();
            form.addEventListener('submit', handleFormSubmit);
        });
    </script>
}
